version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the migration.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/UpSvCVKsMipzyF5tpkxdPQ/migration_<< parameters.workflow_id >>)
            if [[ "${SUCCESS}" == "1" ]]
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend-test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  dockerfile-lint-front-end:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Make install
          command: |
            cd frontend
            make install
      - run:
          name: Make lint
          command: |
            cd frontend
            make lint

  dockerfile-lint-back-end:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Make install
          command: |
            cd backend
            make install
      - run:
          name: Make lint
          command: |
            cd backend
            make lint
  images-build:
    docker:
      - image: docker:17.05.0-ce-git
        # auth:
        #   username: $DOCKER_USER
        #   password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Git Commit ID
          command: | 
            export commitID=$(git rev-parse --short HEAD)
            echo ${commitID}
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: Build application Docker image
          command: |
            docker-compose build
      - deploy:
          name: Push application Docker image
          command: |
            export commitID=$(git rev-parse --short HEAD)
            echo ${commitID}
            
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password $DOCKER_PASS
              docker tag huannv93/udacity-awsdevops-project03-1_frontend huannv93/udacity-awsdevops-project03-1_frontend:${commitID}
              docker tag huannv93/udacity-awsdevops-project03-1_backend huannv93/udacity-awsdevops-project03-1_backend:${commitID}
              docker push huannv93/udacity-awsdevops-project03-1_frontend:${commitID}
              docker push huannv93/udacity-awsdevops-project03-1_backend:${commitID}
            fi





  deploy-EKS:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip curl
          command: |
            yum install -y tar gzip curl
      - run:
          name: Install tar kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.16/2023-01-30/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run:
          name: Authentication with EKS
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKSCLUSTERNAME
      - run:
          name: Deploy Backend
          command: |
            export commitID=$(git rev-parse --short HEAD)
            kubectl set image deployment/backend-deployment be=huannv93/udacity-awsdevops-project03-1_backend:${commitID} -n eks-udacity-app
      - run:
          name: Deploy Backend
          command: |
            export commitID=$(git rev-parse --short HEAD)
            kubectl set image deployment/frontend-deployment fe=huannv93/udacity-awsdevops-project03-1_frontend:${commitID} -n eks-udacity-app

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - dockerfile-lint-back-end
      - dockerfile-lint-front-end
      - images-build
      - deploy-EKS:
          requires: [images-build]
            