version: 2.1

# commands:

#   rollback-Back-end:
#     description: Rollback to old image tag
#     steps:
#       - run:
#           name: Rollback
#           when: on_fail
#           command: |
#             curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.16/2023-01-30/bin/linux/amd64/kubectl
#             chmod +x ./kubectl
#             mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
#             kubectl version --short --client

#             export commitID_OLD=$(git rev-parse --short HEAD~1)
#             kubectl set image deployment/backend-deployment be=huannv93/udacity-awsdevops-project03-1_backend:${commitID_OLD} -n eks-udacity-app
#   rollback-Front-end:
#     description: Rollback to old image tag
#     steps:
#       - run:
#           name: Rollback
#           when: on_fail
#           command: |
#             curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.16/2023-01-30/bin/linux/amd64/kubectl
#             chmod +x ./kubectl
#             mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
#             kubectl version --short --client

#             export commitID_OLD=$(git rev-parse --short HEAD~1)
#             kubectl set image deployment/frontend-deployment be=huannv93/udacity-awsdevops-project03-1_frontend:${commitID_OLD} -n eks-udacity-app
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend-test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  dockerfile-lint-front-end:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Make install
          command: |
            cd frontend
            make install
      - run:
          name: Make lint
          command: |
            cd frontend
            make lint

  dockerfile-lint-back-end:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Make install
          command: |
            cd backend
            make install
      - run:
          name: Make lint
          command: |
            cd backend
            make lint
  images-build:
    docker:
      - image: docker:17.05.0-ce-git
        # auth:
        #   username: $DOCKER_USER
        #   password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Git Commit ID
          command: | 
            export commitID=$(git rev-parse --short HEAD)
            echo ${commitID}
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: Build application Docker image
          command: |
            docker-compose build
      - deploy:
          name: Push application Docker image
          command: |
            export commitID=$(git rev-parse --short HEAD)
            echo ${commitID}
            
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password $DOCKER_PASS
              docker tag huannv93/udacity-awsdevops-project03-1_frontend huannv93/udacity-awsdevops-project03-1_frontend:${commitID}
              docker tag huannv93/udacity-awsdevops-project03-1_backend huannv93/udacity-awsdevops-project03-1_backend:${commitID}
              docker push huannv93/udacity-awsdevops-project03-1_frontend:${commitID}
              docker push huannv93/udacity-awsdevops-project03-1_backend:${commitID}
            fi

  deploy-EKS:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip curl git
          command: |
            yum install -y tar gzip curl git
      - run:
          name: Install tar kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.16/2023-01-30/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run:
          name: Authentication with EKS
          command: |
            echo $(aws sts get-caller-identity)
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Backend
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.16/2023-01-30/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client

            export commitID=$(git rev-parse --short HEAD)
            kubectl set image deployment/backend-deployment be=huannv93/udacity-awsdevops-project03-1_backend:${commitID} -n eks-udacity-app
      - run:
          name: Deploy Frontend
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.16/2023-01-30/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client

            export commitID=$(git rev-parse --short HEAD)
            kubectl set image deployment/frontend-deployment fe=huannv93/udacity-awsdevops-project03-1_frontend:${commitID} -n eks-udacity-app

  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl nodejs npm aws-cli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://a7fee27123817476283f35beae74d90f-139533906.us-east-1.elb.amazonaws.com:3000"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Backend smoke test
          command: |
            export API_URL="http://af7805098b91848e59cb858fae815fd8-839165628.us-east-1.elb.amazonaws.com:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - dockerfile-lint-back-end
      - dockerfile-lint-front-end
      - images-build
      - deploy-EKS:
          requires: [images-build]
      - smoke-test:
          requests: [deploy-EKS]
            